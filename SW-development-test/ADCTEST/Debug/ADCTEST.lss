
ADCTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000812  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000990  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000464  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ef 03 	call	0x7de	; 0x7de <main>
  64:	0c 94 07 04 	jmp	0x80e	; 0x80e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_register.h"

void ADC_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* AVCC as reference voltage  */
    SET_BIT(ADMUX, ADMUX_REFS0);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
    CLEAR_BIT(ADMUX, ADMUX_REFS1);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

    /* Activate left adjust result 8bit */
    SET_BIT(ADMUX, ADMUX_ADLAR);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8c 93       	st	X, r24
    
    /* set prescaler to divide by128 */
    SET_BIT(ADCSRA,ADCSRA_ADPS2);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS1);
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS0);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8c 93       	st	X, r24

    /* Enable ADC */
    SET_BIT(ADCSRA,ADCSRA_ADEN);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8c 93       	st	X, r24
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <ADC_u8GetChannelReading>:

u8 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
	/* Clear the mask bits in ADMUX register */
	ADMUX &=0b11100000;
  e8:	a7 e2       	ldi	r26, 0x27	; 39
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e7 e2       	ldi	r30, 0x27	; 39
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	8c 93       	st	X, r24
	/* Set the required channel into the MUX bits */
	ADMUX |= Copy_u8Channel;
  f6:	a7 e2       	ldi	r26, 0x27	; 39
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e7 e2       	ldi	r30, 0x27	; 39
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	89 2b       	or	r24, r25
 104:	8c 93       	st	X, r24


	/* Start ADC conversion */
	SET_BIT(ADCSRA, ADCSRA_ADSC);
 106:	a6 e2       	ldi	r26, 0x26	; 38
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e6 e2       	ldi	r30, 0x26	; 38
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c 93       	st	X, r24

	/* Polling busy waiting until the conversion complete flag is set */
	while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
 114:	e6 e2       	ldi	r30, 0x26	; 38
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 95       	swap	r24
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 70       	andi	r24, 0x01	; 1
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	a9 f3       	breq	.-22     	; 0x114 <ADC_u8GetChannelReading+0x38>
	SET_BIT(ADCSRA, ADCSRA_ADIF);
 12a:	a6 e2       	ldi	r26, 0x26	; 38
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e6 e2       	ldi	r30, 0x26	; 38
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 61       	ori	r24, 0x10	; 16
 136:	8c 93       	st	X, r24

	/* return the ADC value */
	return ADCH;
 138:	e5 e2       	ldi	r30, 0x25	; 37
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
}
 13e:	0f 90       	pop	r0
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <DIO_u8SetPinDirection>:
 *          - Error state:
 *              - 0: Function executed successfully.
 *              - 1: An error occurred during execution.
 */
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	28 97       	sbiw	r28, 0x08	; 8
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	8a 83       	std	Y+2, r24	; 0x02
 15c:	6b 83       	std	Y+3, r22	; 0x03
 15e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
 160:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_u8SetPinDirection+0x24>
 168:	f4 c0       	rjmp	.+488    	; 0x352 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction  == DIO_u8PIN_INPUT)
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	88 23       	and	r24, r24
 16e:	09 f0       	breq	.+2      	; 0x172 <DIO_u8SetPinDirection+0x2c>
 170:	77 c0       	rjmp	.+238    	; 0x260 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	38 87       	std	Y+8, r19	; 0x08
 17a:	2f 83       	std	Y+7, r18	; 0x07
 17c:	8f 81       	ldd	r24, Y+7	; 0x07
 17e:	98 85       	ldd	r25, Y+8	; 0x08
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	59 f1       	breq	.+86     	; 0x1dc <DIO_u8SetPinDirection+0x96>
 186:	2f 81       	ldd	r18, Y+7	; 0x07
 188:	38 85       	ldd	r19, Y+8	; 0x08
 18a:	22 30       	cpi	r18, 0x02	; 2
 18c:	31 05       	cpc	r19, r1
 18e:	2c f4       	brge	.+10     	; 0x19a <DIO_u8SetPinDirection+0x54>
 190:	8f 81       	ldd	r24, Y+7	; 0x07
 192:	98 85       	ldd	r25, Y+8	; 0x08
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	69 f0       	breq	.+26     	; 0x1b2 <DIO_u8SetPinDirection+0x6c>
 198:	60 c0       	rjmp	.+192    	; 0x25a <DIO_u8SetPinDirection+0x114>
 19a:	2f 81       	ldd	r18, Y+7	; 0x07
 19c:	38 85       	ldd	r19, Y+8	; 0x08
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	89 f1       	breq	.+98     	; 0x206 <DIO_u8SetPinDirection+0xc0>
 1a4:	8f 81       	ldd	r24, Y+7	; 0x07
 1a6:	98 85       	ldd	r25, Y+8	; 0x08
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	91 05       	cpc	r25, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <DIO_u8SetPinDirection+0x6a>
 1ae:	40 c0       	rjmp	.+128    	; 0x230 <DIO_u8SetPinDirection+0xea>
 1b0:	54 c0       	rjmp	.+168    	; 0x25a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLEAR_BIT(DDRA, Copy_u8Pin); break;
 1b2:	aa e3       	ldi	r26, 0x3A	; 58
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	ea e3       	ldi	r30, 0x3A	; 58
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	48 2f       	mov	r20, r24
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_u8SetPinDirection+0x8a>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_u8SetPinDirection+0x86>
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8c 93       	st	X, r24
 1da:	bd c0       	rjmp	.+378    	; 0x356 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLEAR_BIT(DDRB, Copy_u8Pin); break;
 1dc:	a7 e3       	ldi	r26, 0x37	; 55
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	e7 e3       	ldi	r30, 0x37	; 55
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinDirection+0xb4>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinDirection+0xb0>
 1fe:	80 95       	com	r24
 200:	84 23       	and	r24, r20
 202:	8c 93       	st	X, r24
 204:	a8 c0       	rjmp	.+336    	; 0x356 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLEAR_BIT(DDRC, Copy_u8Pin); break;
 206:	a4 e3       	ldi	r26, 0x34	; 52
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e4 e3       	ldi	r30, 0x34	; 52
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_u8SetPinDirection+0xde>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_u8SetPinDirection+0xda>
 228:	80 95       	com	r24
 22a:	84 23       	and	r24, r20
 22c:	8c 93       	st	X, r24
 22e:	93 c0       	rjmp	.+294    	; 0x356 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLEAR_BIT(DDRD, Copy_u8Pin); break;
 230:	a1 e3       	ldi	r26, 0x31	; 49
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	e1 e3       	ldi	r30, 0x31	; 49
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 2e       	mov	r0, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8SetPinDirection+0x108>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_u8SetPinDirection+0x104>
 252:	80 95       	com	r24
 254:	84 23       	and	r24, r20
 256:	8c 93       	st	X, r24
 258:	7e c0       	rjmp	.+252    	; 0x356 <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	7b c0       	rjmp	.+246    	; 0x356 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction  == DIO_u8PIN_OUTPUT)
 260:	8c 81       	ldd	r24, Y+4	; 0x04
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	09 f0       	breq	.+2      	; 0x268 <DIO_u8SetPinDirection+0x122>
 266:	72 c0       	rjmp	.+228    	; 0x34c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	3e 83       	std	Y+6, r19	; 0x06
 270:	2d 83       	std	Y+5, r18	; 0x05
 272:	8d 81       	ldd	r24, Y+5	; 0x05
 274:	9e 81       	ldd	r25, Y+6	; 0x06
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 05       	cpc	r25, r1
 27a:	49 f1       	breq	.+82     	; 0x2ce <DIO_u8SetPinDirection+0x188>
 27c:	2d 81       	ldd	r18, Y+5	; 0x05
 27e:	3e 81       	ldd	r19, Y+6	; 0x06
 280:	22 30       	cpi	r18, 0x02	; 2
 282:	31 05       	cpc	r19, r1
 284:	2c f4       	brge	.+10     	; 0x290 <DIO_u8SetPinDirection+0x14a>
 286:	8d 81       	ldd	r24, Y+5	; 0x05
 288:	9e 81       	ldd	r25, Y+6	; 0x06
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	61 f0       	breq	.+24     	; 0x2a6 <DIO_u8SetPinDirection+0x160>
 28e:	5b c0       	rjmp	.+182    	; 0x346 <DIO_u8SetPinDirection+0x200>
 290:	2d 81       	ldd	r18, Y+5	; 0x05
 292:	3e 81       	ldd	r19, Y+6	; 0x06
 294:	22 30       	cpi	r18, 0x02	; 2
 296:	31 05       	cpc	r19, r1
 298:	71 f1       	breq	.+92     	; 0x2f6 <DIO_u8SetPinDirection+0x1b0>
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	e9 f1       	breq	.+122    	; 0x31e <DIO_u8SetPinDirection+0x1d8>
 2a4:	50 c0       	rjmp	.+160    	; 0x346 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
 2a6:	aa e3       	ldi	r26, 0x3A	; 58
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	ea e3       	ldi	r30, 0x3A	; 58
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8b 81       	ldd	r24, Y+3	; 0x03
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_u8SetPinDirection+0x17e>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_u8SetPinDirection+0x17a>
 2c8:	84 2b       	or	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	44 c0       	rjmp	.+136    	; 0x356 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
 2ce:	a7 e3       	ldi	r26, 0x37	; 55
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	e7 e3       	ldi	r30, 0x37	; 55
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8SetPinDirection+0x1a6>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8SetPinDirection+0x1a2>
 2f0:	84 2b       	or	r24, r20
 2f2:	8c 93       	st	X, r24
 2f4:	30 c0       	rjmp	.+96     	; 0x356 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
 2f6:	a4 e3       	ldi	r26, 0x34	; 52
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	e4 e3       	ldi	r30, 0x34	; 52
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8SetPinDirection+0x1ce>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8SetPinDirection+0x1ca>
 318:	84 2b       	or	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	1c c0       	rjmp	.+56     	; 0x356 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
 31e:	a1 e3       	ldi	r26, 0x31	; 49
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e1 e3       	ldi	r30, 0x31	; 49
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8SetPinDirection+0x1f6>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8SetPinDirection+0x1f2>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
 344:	08 c0       	rjmp	.+16     	; 0x356 <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	89 83       	std	Y+1, r24	; 0x01
 34a:	05 c0       	rjmp	.+10     	; 0x356 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 356:	89 81       	ldd	r24, Y+1	; 0x01
}
 358:	28 96       	adiw	r28, 0x08	; 8
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

0000036a <DIO_u8SetPortDirection>:
 *          - Error state:
 *              - 0: Function executed successfully.
 *              - 1: An error occurred during execution.
 */
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	00 d0       	rcall	.+0      	; 0x370 <DIO_u8SetPortDirection+0x6>
 370:	00 d0       	rcall	.+0      	; 0x372 <DIO_u8SetPortDirection+0x8>
 372:	0f 92       	push	r0
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	8a 83       	std	Y+2, r24	; 0x02
 37a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
 37c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	3d 83       	std	Y+5, r19	; 0x05
 386:	2c 83       	std	Y+4, r18	; 0x04
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	91 05       	cpc	r25, r1
 390:	d1 f0       	breq	.+52     	; 0x3c6 <DIO_u8SetPortDirection+0x5c>
 392:	2c 81       	ldd	r18, Y+4	; 0x04
 394:	3d 81       	ldd	r19, Y+5	; 0x05
 396:	22 30       	cpi	r18, 0x02	; 2
 398:	31 05       	cpc	r19, r1
 39a:	2c f4       	brge	.+10     	; 0x3a6 <DIO_u8SetPortDirection+0x3c>
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	9d 81       	ldd	r25, Y+5	; 0x05
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	61 f0       	breq	.+24     	; 0x3bc <DIO_u8SetPortDirection+0x52>
 3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <DIO_u8SetPortDirection+0x7a>
 3a6:	2c 81       	ldd	r18, Y+4	; 0x04
 3a8:	3d 81       	ldd	r19, Y+5	; 0x05
 3aa:	22 30       	cpi	r18, 0x02	; 2
 3ac:	31 05       	cpc	r19, r1
 3ae:	81 f0       	breq	.+32     	; 0x3d0 <DIO_u8SetPortDirection+0x66>
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	9d 81       	ldd	r25, Y+5	; 0x05
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	91 05       	cpc	r25, r1
 3b8:	81 f0       	breq	.+32     	; 0x3da <DIO_u8SetPortDirection+0x70>
 3ba:	14 c0       	rjmp	.+40     	; 0x3e4 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
 3bc:	ea e3       	ldi	r30, 0x3A	; 58
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	80 83       	st	Z, r24
 3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
 3c6:	e7 e3       	ldi	r30, 0x37	; 55
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	80 83       	st	Z, r24
 3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
 3d0:	e4 e3       	ldi	r30, 0x34	; 52
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	80 83       	st	Z, r24
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
 3da:	e1 e3       	ldi	r30, 0x31	; 49
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	80 83       	st	Z, r24
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	cf 91       	pop	r28
 3f6:	df 91       	pop	r29
 3f8:	08 95       	ret

000003fa <DIO_u8SetPinValue>:
 *          - Error state:
 *              - 0: Function executed successfully.
 *              - 1: An error occurred during execution.
 */
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 3fa:	df 93       	push	r29
 3fc:	cf 93       	push	r28
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	28 97       	sbiw	r28, 0x08	; 8
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	8a 83       	std	Y+2, r24	; 0x02
 410:	6b 83       	std	Y+3, r22	; 0x03
 412:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
 414:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	88 30       	cpi	r24, 0x08	; 8
 41a:	08 f0       	brcs	.+2      	; 0x41e <DIO_u8SetPinValue+0x24>
 41c:	f4 c0       	rjmp	.+488    	; 0x606 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value  == DIO_u8PIN_LOW)
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	88 23       	and	r24, r24
 422:	09 f0       	breq	.+2      	; 0x426 <DIO_u8SetPinValue+0x2c>
 424:	77 c0       	rjmp	.+238    	; 0x514 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	38 87       	std	Y+8, r19	; 0x08
 42e:	2f 83       	std	Y+7, r18	; 0x07
 430:	8f 81       	ldd	r24, Y+7	; 0x07
 432:	98 85       	ldd	r25, Y+8	; 0x08
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	91 05       	cpc	r25, r1
 438:	59 f1       	breq	.+86     	; 0x490 <DIO_u8SetPinValue+0x96>
 43a:	2f 81       	ldd	r18, Y+7	; 0x07
 43c:	38 85       	ldd	r19, Y+8	; 0x08
 43e:	22 30       	cpi	r18, 0x02	; 2
 440:	31 05       	cpc	r19, r1
 442:	2c f4       	brge	.+10     	; 0x44e <DIO_u8SetPinValue+0x54>
 444:	8f 81       	ldd	r24, Y+7	; 0x07
 446:	98 85       	ldd	r25, Y+8	; 0x08
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	69 f0       	breq	.+26     	; 0x466 <DIO_u8SetPinValue+0x6c>
 44c:	60 c0       	rjmp	.+192    	; 0x50e <DIO_u8SetPinValue+0x114>
 44e:	2f 81       	ldd	r18, Y+7	; 0x07
 450:	38 85       	ldd	r19, Y+8	; 0x08
 452:	22 30       	cpi	r18, 0x02	; 2
 454:	31 05       	cpc	r19, r1
 456:	89 f1       	breq	.+98     	; 0x4ba <DIO_u8SetPinValue+0xc0>
 458:	8f 81       	ldd	r24, Y+7	; 0x07
 45a:	98 85       	ldd	r25, Y+8	; 0x08
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	91 05       	cpc	r25, r1
 460:	09 f4       	brne	.+2      	; 0x464 <DIO_u8SetPinValue+0x6a>
 462:	40 c0       	rjmp	.+128    	; 0x4e4 <DIO_u8SetPinValue+0xea>
 464:	54 c0       	rjmp	.+168    	; 0x50e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLEAR_BIT(PORTA, Copy_u8Pin); break;
 466:	ab e3       	ldi	r26, 0x3B	; 59
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	eb e3       	ldi	r30, 0x3B	; 59
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	48 2f       	mov	r20, r24
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 2e       	mov	r0, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_u8SetPinValue+0x8a>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_u8SetPinValue+0x86>
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	bd c0       	rjmp	.+378    	; 0x60a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLEAR_BIT(PORTB, Copy_u8Pin); break;
 490:	a8 e3       	ldi	r26, 0x38	; 56
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e8 e3       	ldi	r30, 0x38	; 56
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_u8SetPinValue+0xb4>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_u8SetPinValue+0xb0>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	8c 93       	st	X, r24
 4b8:	a8 c0       	rjmp	.+336    	; 0x60a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLEAR_BIT(PORTC, Copy_u8Pin); break;
 4ba:	a5 e3       	ldi	r26, 0x35	; 53
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e5 e3       	ldi	r30, 0x35	; 53
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8SetPinValue+0xde>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8SetPinValue+0xda>
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	8c 93       	st	X, r24
 4e2:	93 c0       	rjmp	.+294    	; 0x60a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLEAR_BIT(PORTD, Copy_u8Pin); break;
 4e4:	a2 e3       	ldi	r26, 0x32	; 50
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e2 e3       	ldi	r30, 0x32	; 50
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_u8SetPinValue+0x108>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_u8SetPinValue+0x104>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
 50c:	7e c0       	rjmp	.+252    	; 0x60a <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = 1;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	89 83       	std	Y+1, r24	; 0x01
 512:	7b c0       	rjmp	.+246    	; 0x60a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value  == DIO_u8PIN_HIGH)
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <DIO_u8SetPinValue+0x122>
 51a:	72 c0       	rjmp	.+228    	; 0x600 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	3e 83       	std	Y+6, r19	; 0x06
 524:	2d 83       	std	Y+5, r18	; 0x05
 526:	8d 81       	ldd	r24, Y+5	; 0x05
 528:	9e 81       	ldd	r25, Y+6	; 0x06
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	49 f1       	breq	.+82     	; 0x582 <DIO_u8SetPinValue+0x188>
 530:	2d 81       	ldd	r18, Y+5	; 0x05
 532:	3e 81       	ldd	r19, Y+6	; 0x06
 534:	22 30       	cpi	r18, 0x02	; 2
 536:	31 05       	cpc	r19, r1
 538:	2c f4       	brge	.+10     	; 0x544 <DIO_u8SetPinValue+0x14a>
 53a:	8d 81       	ldd	r24, Y+5	; 0x05
 53c:	9e 81       	ldd	r25, Y+6	; 0x06
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	61 f0       	breq	.+24     	; 0x55a <DIO_u8SetPinValue+0x160>
 542:	5b c0       	rjmp	.+182    	; 0x5fa <DIO_u8SetPinValue+0x200>
 544:	2d 81       	ldd	r18, Y+5	; 0x05
 546:	3e 81       	ldd	r19, Y+6	; 0x06
 548:	22 30       	cpi	r18, 0x02	; 2
 54a:	31 05       	cpc	r19, r1
 54c:	71 f1       	breq	.+92     	; 0x5aa <DIO_u8SetPinValue+0x1b0>
 54e:	8d 81       	ldd	r24, Y+5	; 0x05
 550:	9e 81       	ldd	r25, Y+6	; 0x06
 552:	83 30       	cpi	r24, 0x03	; 3
 554:	91 05       	cpc	r25, r1
 556:	e9 f1       	breq	.+122    	; 0x5d2 <DIO_u8SetPinValue+0x1d8>
 558:	50 c0       	rjmp	.+160    	; 0x5fa <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
 55a:	ab e3       	ldi	r26, 0x3B	; 59
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	eb e3       	ldi	r30, 0x3B	; 59
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 2e       	mov	r0, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_u8SetPinValue+0x17e>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_u8SetPinValue+0x17a>
 57c:	84 2b       	or	r24, r20
 57e:	8c 93       	st	X, r24
 580:	44 c0       	rjmp	.+136    	; 0x60a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
 582:	a8 e3       	ldi	r26, 0x38	; 56
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e8 e3       	ldi	r30, 0x38	; 56
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	48 2f       	mov	r20, r24
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8SetPinValue+0x1a6>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_u8SetPinValue+0x1a2>
 5a4:	84 2b       	or	r24, r20
 5a6:	8c 93       	st	X, r24
 5a8:	30 c0       	rjmp	.+96     	; 0x60a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
 5aa:	a5 e3       	ldi	r26, 0x35	; 53
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	e5 e3       	ldi	r30, 0x35	; 53
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	48 2f       	mov	r20, r24
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 2e       	mov	r0, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8SetPinValue+0x1ce>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_u8SetPinValue+0x1ca>
 5cc:	84 2b       	or	r24, r20
 5ce:	8c 93       	st	X, r24
 5d0:	1c c0       	rjmp	.+56     	; 0x60a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
 5d2:	a2 e3       	ldi	r26, 0x32	; 50
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	e2 e3       	ldi	r30, 0x32	; 50
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	48 2f       	mov	r20, r24
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 2e       	mov	r0, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_u8SetPinValue+0x1f6>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_u8SetPinValue+0x1f2>
 5f4:	84 2b       	or	r24, r20
 5f6:	8c 93       	st	X, r24
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	89 83       	std	Y+1, r24	; 0x01
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 60a:	89 81       	ldd	r24, Y+1	; 0x01
}
 60c:	28 96       	adiw	r28, 0x08	; 8
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	cf 91       	pop	r28
 61a:	df 91       	pop	r29
 61c:	08 95       	ret

0000061e <DIO_u8SetPortValue>:
 *          - Error state:
 *              - 0: Function executed successfully.
 *              - 1: An error occurred during execution.
 */
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 61e:	df 93       	push	r29
 620:	cf 93       	push	r28
 622:	00 d0       	rcall	.+0      	; 0x624 <DIO_u8SetPortValue+0x6>
 624:	00 d0       	rcall	.+0      	; 0x626 <DIO_u8SetPortValue+0x8>
 626:	0f 92       	push	r0
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	8a 83       	std	Y+2, r24	; 0x02
 62e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
 630:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	3d 83       	std	Y+5, r19	; 0x05
 63a:	2c 83       	std	Y+4, r18	; 0x04
 63c:	8c 81       	ldd	r24, Y+4	; 0x04
 63e:	9d 81       	ldd	r25, Y+5	; 0x05
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	91 05       	cpc	r25, r1
 644:	d1 f0       	breq	.+52     	; 0x67a <DIO_u8SetPortValue+0x5c>
 646:	2c 81       	ldd	r18, Y+4	; 0x04
 648:	3d 81       	ldd	r19, Y+5	; 0x05
 64a:	22 30       	cpi	r18, 0x02	; 2
 64c:	31 05       	cpc	r19, r1
 64e:	2c f4       	brge	.+10     	; 0x65a <DIO_u8SetPortValue+0x3c>
 650:	8c 81       	ldd	r24, Y+4	; 0x04
 652:	9d 81       	ldd	r25, Y+5	; 0x05
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	61 f0       	breq	.+24     	; 0x670 <DIO_u8SetPortValue+0x52>
 658:	1f c0       	rjmp	.+62     	; 0x698 <DIO_u8SetPortValue+0x7a>
 65a:	2c 81       	ldd	r18, Y+4	; 0x04
 65c:	3d 81       	ldd	r19, Y+5	; 0x05
 65e:	22 30       	cpi	r18, 0x02	; 2
 660:	31 05       	cpc	r19, r1
 662:	81 f0       	breq	.+32     	; 0x684 <DIO_u8SetPortValue+0x66>
 664:	8c 81       	ldd	r24, Y+4	; 0x04
 666:	9d 81       	ldd	r25, Y+5	; 0x05
 668:	83 30       	cpi	r24, 0x03	; 3
 66a:	91 05       	cpc	r25, r1
 66c:	81 f0       	breq	.+32     	; 0x68e <DIO_u8SetPortValue+0x70>
 66e:	14 c0       	rjmp	.+40     	; 0x698 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 670:	eb e3       	ldi	r30, 0x3B	; 59
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	80 83       	st	Z, r24
 678:	11 c0       	rjmp	.+34     	; 0x69c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 67a:	e8 e3       	ldi	r30, 0x38	; 56
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	80 83       	st	Z, r24
 682:	0c c0       	rjmp	.+24     	; 0x69c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 684:	e5 e3       	ldi	r30, 0x35	; 53
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	80 83       	st	Z, r24
 68c:	07 c0       	rjmp	.+14     	; 0x69c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 68e:	e2 e3       	ldi	r30, 0x32	; 50
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	80 83       	st	Z, r24
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = 1;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 69c:	89 81       	ldd	r24, Y+1	; 0x01
}
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	cf 91       	pop	r28
 6aa:	df 91       	pop	r29
 6ac:	08 95       	ret

000006ae <DIO_u8GetPinValue>:
 *          - Error state:
 *              - 0: Function executed successfully.
 *              - 1: An error occurred during execution.
 */
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
 6ae:	df 93       	push	r29
 6b0:	cf 93       	push	r28
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	27 97       	sbiw	r28, 0x07	; 7
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	8a 83       	std	Y+2, r24	; 0x02
 6c4:	6b 83       	std	Y+3, r22	; 0x03
 6c6:	5d 83       	std	Y+5, r21	; 0x05
 6c8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
 6ca:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != (NULL) && Copy_u8Pin<= DIO_u8PIN7)
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	9d 81       	ldd	r25, Y+5	; 0x05
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <DIO_u8GetPinValue+0x28>
 6d4:	78 c0       	rjmp	.+240    	; 0x7c6 <DIO_u8GetPinValue+0x118>
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	08 f0       	brcs	.+2      	; 0x6de <DIO_u8GetPinValue+0x30>
 6dc:	74 c0       	rjmp	.+232    	; 0x7c6 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3f 83       	std	Y+7, r19	; 0x07
 6e6:	2e 83       	std	Y+6, r18	; 0x06
 6e8:	4e 81       	ldd	r20, Y+6	; 0x06
 6ea:	5f 81       	ldd	r21, Y+7	; 0x07
 6ec:	41 30       	cpi	r20, 0x01	; 1
 6ee:	51 05       	cpc	r21, r1
 6f0:	59 f1       	breq	.+86     	; 0x748 <DIO_u8GetPinValue+0x9a>
 6f2:	8e 81       	ldd	r24, Y+6	; 0x06
 6f4:	9f 81       	ldd	r25, Y+7	; 0x07
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	91 05       	cpc	r25, r1
 6fa:	34 f4       	brge	.+12     	; 0x708 <DIO_u8GetPinValue+0x5a>
 6fc:	2e 81       	ldd	r18, Y+6	; 0x06
 6fe:	3f 81       	ldd	r19, Y+7	; 0x07
 700:	21 15       	cp	r18, r1
 702:	31 05       	cpc	r19, r1
 704:	69 f0       	breq	.+26     	; 0x720 <DIO_u8GetPinValue+0x72>
 706:	5c c0       	rjmp	.+184    	; 0x7c0 <DIO_u8GetPinValue+0x112>
 708:	4e 81       	ldd	r20, Y+6	; 0x06
 70a:	5f 81       	ldd	r21, Y+7	; 0x07
 70c:	42 30       	cpi	r20, 0x02	; 2
 70e:	51 05       	cpc	r21, r1
 710:	79 f1       	breq	.+94     	; 0x770 <DIO_u8GetPinValue+0xc2>
 712:	8e 81       	ldd	r24, Y+6	; 0x06
 714:	9f 81       	ldd	r25, Y+7	; 0x07
 716:	83 30       	cpi	r24, 0x03	; 3
 718:	91 05       	cpc	r25, r1
 71a:	09 f4       	brne	.+2      	; 0x71e <DIO_u8GetPinValue+0x70>
 71c:	3d c0       	rjmp	.+122    	; 0x798 <DIO_u8GetPinValue+0xea>
 71e:	50 c0       	rjmp	.+160    	; 0x7c0 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin);  break;
 720:	e9 e3       	ldi	r30, 0x39	; 57
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	28 2f       	mov	r18, r24
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	88 2f       	mov	r24, r24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	a9 01       	movw	r20, r18
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_u8GetPinValue+0x8a>
 734:	55 95       	asr	r21
 736:	47 95       	ror	r20
 738:	8a 95       	dec	r24
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_u8GetPinValue+0x86>
 73c:	ca 01       	movw	r24, r20
 73e:	81 70       	andi	r24, 0x01	; 1
 740:	ec 81       	ldd	r30, Y+4	; 0x04
 742:	fd 81       	ldd	r31, Y+5	; 0x05
 744:	80 83       	st	Z, r24
 746:	41 c0       	rjmp	.+130    	; 0x7ca <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
 748:	e6 e3       	ldi	r30, 0x36	; 54
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	88 2f       	mov	r24, r24
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	a9 01       	movw	r20, r18
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_u8GetPinValue+0xb2>
 75c:	55 95       	asr	r21
 75e:	47 95       	ror	r20
 760:	8a 95       	dec	r24
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_u8GetPinValue+0xae>
 764:	ca 01       	movw	r24, r20
 766:	81 70       	andi	r24, 0x01	; 1
 768:	ec 81       	ldd	r30, Y+4	; 0x04
 76a:	fd 81       	ldd	r31, Y+5	; 0x05
 76c:	80 83       	st	Z, r24
 76e:	2d c0       	rjmp	.+90     	; 0x7ca <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
 770:	e3 e3       	ldi	r30, 0x33	; 51
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	28 2f       	mov	r18, r24
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	8b 81       	ldd	r24, Y+3	; 0x03
 77c:	88 2f       	mov	r24, r24
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	a9 01       	movw	r20, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_u8GetPinValue+0xda>
 784:	55 95       	asr	r21
 786:	47 95       	ror	r20
 788:	8a 95       	dec	r24
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_u8GetPinValue+0xd6>
 78c:	ca 01       	movw	r24, r20
 78e:	81 70       	andi	r24, 0x01	; 1
 790:	ec 81       	ldd	r30, Y+4	; 0x04
 792:	fd 81       	ldd	r31, Y+5	; 0x05
 794:	80 83       	st	Z, r24
 796:	19 c0       	rjmp	.+50     	; 0x7ca <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
 798:	e0 e3       	ldi	r30, 0x30	; 48
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	28 2f       	mov	r18, r24
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	88 2f       	mov	r24, r24
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	a9 01       	movw	r20, r18
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_u8GetPinValue+0x102>
 7ac:	55 95       	asr	r21
 7ae:	47 95       	ror	r20
 7b0:	8a 95       	dec	r24
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_u8GetPinValue+0xfe>
 7b4:	ca 01       	movw	r24, r20
 7b6:	81 70       	andi	r24, 0x01	; 1
 7b8:	ec 81       	ldd	r30, Y+4	; 0x04
 7ba:	fd 81       	ldd	r31, Y+5	; 0x05
 7bc:	80 83       	st	Z, r24
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState = 1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	89 83       	std	Y+1, r24	; 0x01
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 7cc:	27 96       	adiw	r28, 0x07	; 7
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
 7d8:	cf 91       	pop	r28
 7da:	df 91       	pop	r29
 7dc:	08 95       	ret

000007de <main>:
#include "ADC_interface.h"
#include "DIO_interface.h"


int main(void)
{
 7de:	df 93       	push	r29
 7e0:	cf 93       	push	r28
 7e2:	0f 92       	push	r0
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ADCReading;
	DIO_u8SetPortDirection(DIO_u8PORTA, DIO_u8PORT_INPUT);
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTC, DIO_u8PORT_OUTPUT);
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	6f ef       	ldi	r22, 0xFF	; 255
 7f4:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_u8SetPortDirection>

	ADC_voidInit();
 7f8:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>



	while(1)
	{
		Local_u8ADCReading = ADC_u8GetChannelReading(0);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_u8GetChannelReading>
 802:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPortValue(DIO_u8PORTC, Local_u8ADCReading);
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	69 81       	ldd	r22, Y+1	; 0x01
 808:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_u8SetPortValue>
 80c:	f7 cf       	rjmp	.-18     	; 0x7fc <main+0x1e>

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
