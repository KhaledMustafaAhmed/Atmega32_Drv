
SWITCHTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008e8  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  00000980  2**0
                  ALLOC
  3 .stab         00000b88  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051d  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2d 04 	call	0x85a	; 0x85a <main>
  8a:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	6b 83       	std	Y+3, r22	; 0x03
  aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
  ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinDirection+0x24>
  b4:	f4 c0       	rjmp	.+488    	; 0x29e <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction  == DIO_u8PIN_INPUT)
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	88 23       	and	r24, r24
  ba:	09 f0       	breq	.+2      	; 0xbe <DIO_u8SetPinDirection+0x2c>
  bc:	77 c0       	rjmp	.+238    	; 0x1ac <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	28 2f       	mov	r18, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	38 87       	std	Y+8, r19	; 0x08
  c6:	2f 83       	std	Y+7, r18	; 0x07
  c8:	8f 81       	ldd	r24, Y+7	; 0x07
  ca:	98 85       	ldd	r25, Y+8	; 0x08
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	59 f1       	breq	.+86     	; 0x128 <DIO_u8SetPinDirection+0x96>
  d2:	2f 81       	ldd	r18, Y+7	; 0x07
  d4:	38 85       	ldd	r19, Y+8	; 0x08
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinDirection+0x54>
  dc:	8f 81       	ldd	r24, Y+7	; 0x07
  de:	98 85       	ldd	r25, Y+8	; 0x08
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	69 f0       	breq	.+26     	; 0xfe <DIO_u8SetPinDirection+0x6c>
  e4:	60 c0       	rjmp	.+192    	; 0x1a6 <DIO_u8SetPinDirection+0x114>
  e6:	2f 81       	ldd	r18, Y+7	; 0x07
  e8:	38 85       	ldd	r19, Y+8	; 0x08
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	89 f1       	breq	.+98     	; 0x152 <DIO_u8SetPinDirection+0xc0>
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	98 85       	ldd	r25, Y+8	; 0x08
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinDirection+0x6a>
  fa:	40 c0       	rjmp	.+128    	; 0x17c <DIO_u8SetPinDirection+0xea>
  fc:	54 c0       	rjmp	.+168    	; 0x1a6 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLEAR_BIT(DDRA, Copy_u8Pin); break;
  fe:	aa e3       	ldi	r26, 0x3A	; 58
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	ea e3       	ldi	r30, 0x3A	; 58
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinDirection+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinDirection+0x86>
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	8c 93       	st	X, r24
 126:	bd c0       	rjmp	.+378    	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLEAR_BIT(DDRB, Copy_u8Pin); break;
 128:	a7 e3       	ldi	r26, 0x37	; 55
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e7 e3       	ldi	r30, 0x37	; 55
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	48 2f       	mov	r20, r24
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 2e       	mov	r0, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_u8SetPinDirection+0xb4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_u8SetPinDirection+0xb0>
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	8c 93       	st	X, r24
 150:	a8 c0       	rjmp	.+336    	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLEAR_BIT(DDRC, Copy_u8Pin); break;
 152:	a4 e3       	ldi	r26, 0x34	; 52
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e4 e3       	ldi	r30, 0x34	; 52
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinDirection+0xde>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinDirection+0xda>
 174:	80 95       	com	r24
 176:	84 23       	and	r24, r20
 178:	8c 93       	st	X, r24
 17a:	93 c0       	rjmp	.+294    	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLEAR_BIT(DDRD, Copy_u8Pin); break;
 17c:	a1 e3       	ldi	r26, 0x31	; 49
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e1 e3       	ldi	r30, 0x31	; 49
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_u8SetPinDirection+0x108>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_u8SetPinDirection+0x104>
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction  == DIO_u8PIN_OUTPUT)
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_u8SetPinDirection+0x122>
 1b2:	72 c0       	rjmp	.+228    	; 0x298 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	3e 83       	std	Y+6, r19	; 0x06
 1bc:	2d 83       	std	Y+5, r18	; 0x05
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	91 05       	cpc	r25, r1
 1c6:	49 f1       	breq	.+82     	; 0x21a <DIO_u8SetPinDirection+0x188>
 1c8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ca:	3e 81       	ldd	r19, Y+6	; 0x06
 1cc:	22 30       	cpi	r18, 0x02	; 2
 1ce:	31 05       	cpc	r19, r1
 1d0:	2c f4       	brge	.+10     	; 0x1dc <DIO_u8SetPinDirection+0x14a>
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	9e 81       	ldd	r25, Y+6	; 0x06
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <DIO_u8SetPinDirection+0x160>
 1da:	5b c0       	rjmp	.+182    	; 0x292 <DIO_u8SetPinDirection+0x200>
 1dc:	2d 81       	ldd	r18, Y+5	; 0x05
 1de:	3e 81       	ldd	r19, Y+6	; 0x06
 1e0:	22 30       	cpi	r18, 0x02	; 2
 1e2:	31 05       	cpc	r19, r1
 1e4:	71 f1       	breq	.+92     	; 0x242 <DIO_u8SetPinDirection+0x1b0>
 1e6:	8d 81       	ldd	r24, Y+5	; 0x05
 1e8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	91 05       	cpc	r25, r1
 1ee:	e9 f1       	breq	.+122    	; 0x26a <DIO_u8SetPinDirection+0x1d8>
 1f0:	50 c0       	rjmp	.+160    	; 0x292 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
 1f2:	aa e3       	ldi	r26, 0x3A	; 58
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	ea e3       	ldi	r30, 0x3A	; 58
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinDirection+0x17e>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinDirection+0x17a>
 214:	84 2b       	or	r24, r20
 216:	8c 93       	st	X, r24
 218:	44 c0       	rjmp	.+136    	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
 21a:	a7 e3       	ldi	r26, 0x37	; 55
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e7 e3       	ldi	r30, 0x37	; 55
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_u8SetPinDirection+0x1a6>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_u8SetPinDirection+0x1a2>
 23c:	84 2b       	or	r24, r20
 23e:	8c 93       	st	X, r24
 240:	30 c0       	rjmp	.+96     	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
 242:	a4 e3       	ldi	r26, 0x34	; 52
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e4 e3       	ldi	r30, 0x34	; 52
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinDirection+0x1ce>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinDirection+0x1ca>
 264:	84 2b       	or	r24, r20
 266:	8c 93       	st	X, r24
 268:	1c c0       	rjmp	.+56     	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
 26a:	a1 e3       	ldi	r26, 0x31	; 49
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e1 e3       	ldi	r30, 0x31	; 49
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinDirection+0x1f6>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinDirection+0x1f2>
 28c:	84 2b       	or	r24, r20
 28e:	8c 93       	st	X, r24
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a4:	28 96       	adiw	r28, 0x08	; 8
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	08 95       	ret

000002b6 <DIO_u8SetPortnDirection>:

u8 DIO_u8SetPortnDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_u8SetPortnDirection+0x6>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8SetPortnDirection+0x8>
 2be:	0f 92       	push	r0
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	8a 83       	std	Y+2, r24	; 0x02
 2c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
 2c8:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	3d 83       	std	Y+5, r19	; 0x05
 2d2:	2c 83       	std	Y+4, r18	; 0x04
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
 2d6:	9d 81       	ldd	r25, Y+5	; 0x05
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	91 05       	cpc	r25, r1
 2dc:	d1 f0       	breq	.+52     	; 0x312 <DIO_u8SetPortnDirection+0x5c>
 2de:	2c 81       	ldd	r18, Y+4	; 0x04
 2e0:	3d 81       	ldd	r19, Y+5	; 0x05
 2e2:	22 30       	cpi	r18, 0x02	; 2
 2e4:	31 05       	cpc	r19, r1
 2e6:	2c f4       	brge	.+10     	; 0x2f2 <DIO_u8SetPortnDirection+0x3c>
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	9d 81       	ldd	r25, Y+5	; 0x05
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_u8SetPortnDirection+0x52>
 2f0:	1f c0       	rjmp	.+62     	; 0x330 <DIO_u8SetPortnDirection+0x7a>
 2f2:	2c 81       	ldd	r18, Y+4	; 0x04
 2f4:	3d 81       	ldd	r19, Y+5	; 0x05
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	81 f0       	breq	.+32     	; 0x31c <DIO_u8SetPortnDirection+0x66>
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	9d 81       	ldd	r25, Y+5	; 0x05
 300:	83 30       	cpi	r24, 0x03	; 3
 302:	91 05       	cpc	r25, r1
 304:	81 f0       	breq	.+32     	; 0x326 <DIO_u8SetPortnDirection+0x70>
 306:	14 c0       	rjmp	.+40     	; 0x330 <DIO_u8SetPortnDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
 308:	ea e3       	ldi	r30, 0x3A	; 58
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	80 83       	st	Z, r24
 310:	11 c0       	rjmp	.+34     	; 0x334 <DIO_u8SetPortnDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
 312:	e7 e3       	ldi	r30, 0x37	; 55
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	80 83       	st	Z, r24
 31a:	0c c0       	rjmp	.+24     	; 0x334 <DIO_u8SetPortnDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
 31c:	e4 e3       	ldi	r30, 0x34	; 52
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	80 83       	st	Z, r24
 324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_u8SetPortnDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
 326:	e1 e3       	ldi	r30, 0x31	; 49
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	80 83       	st	Z, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8SetPortnDirection+0x7e>
	default: Local_u8ErrorState = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 334:	89 81       	ldd	r24, Y+1	; 0x01
}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	cf 91       	pop	r28
 342:	df 91       	pop	r29
 344:	08 95       	ret

00000346 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	28 97       	sbiw	r28, 0x08	; 8
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	8a 83       	std	Y+2, r24	; 0x02
 35c:	6b 83       	std	Y+3, r22	; 0x03
 35e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
 360:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	88 30       	cpi	r24, 0x08	; 8
 366:	08 f0       	brcs	.+2      	; 0x36a <DIO_u8SetPinValue+0x24>
 368:	f4 c0       	rjmp	.+488    	; 0x552 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value  == DIO_u8PIN_LOW)
 36a:	8c 81       	ldd	r24, Y+4	; 0x04
 36c:	88 23       	and	r24, r24
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_u8SetPinValue+0x2c>
 370:	77 c0       	rjmp	.+238    	; 0x460 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	38 87       	std	Y+8, r19	; 0x08
 37a:	2f 83       	std	Y+7, r18	; 0x07
 37c:	8f 81       	ldd	r24, Y+7	; 0x07
 37e:	98 85       	ldd	r25, Y+8	; 0x08
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	59 f1       	breq	.+86     	; 0x3dc <DIO_u8SetPinValue+0x96>
 386:	2f 81       	ldd	r18, Y+7	; 0x07
 388:	38 85       	ldd	r19, Y+8	; 0x08
 38a:	22 30       	cpi	r18, 0x02	; 2
 38c:	31 05       	cpc	r19, r1
 38e:	2c f4       	brge	.+10     	; 0x39a <DIO_u8SetPinValue+0x54>
 390:	8f 81       	ldd	r24, Y+7	; 0x07
 392:	98 85       	ldd	r25, Y+8	; 0x08
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	69 f0       	breq	.+26     	; 0x3b2 <DIO_u8SetPinValue+0x6c>
 398:	60 c0       	rjmp	.+192    	; 0x45a <DIO_u8SetPinValue+0x114>
 39a:	2f 81       	ldd	r18, Y+7	; 0x07
 39c:	38 85       	ldd	r19, Y+8	; 0x08
 39e:	22 30       	cpi	r18, 0x02	; 2
 3a0:	31 05       	cpc	r19, r1
 3a2:	89 f1       	breq	.+98     	; 0x406 <DIO_u8SetPinValue+0xc0>
 3a4:	8f 81       	ldd	r24, Y+7	; 0x07
 3a6:	98 85       	ldd	r25, Y+8	; 0x08
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	91 05       	cpc	r25, r1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <DIO_u8SetPinValue+0x6a>
 3ae:	40 c0       	rjmp	.+128    	; 0x430 <DIO_u8SetPinValue+0xea>
 3b0:	54 c0       	rjmp	.+168    	; 0x45a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLEAR_BIT(PORTA, Copy_u8Pin); break;
 3b2:	ab e3       	ldi	r26, 0x3B	; 59
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	eb e3       	ldi	r30, 0x3B	; 59
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinValue+0x8a>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinValue+0x86>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	bd c0       	rjmp	.+378    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLEAR_BIT(PORTB, Copy_u8Pin); break;
 3dc:	a8 e3       	ldi	r26, 0x38	; 56
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e8 e3       	ldi	r30, 0x38	; 56
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8SetPinValue+0xb4>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8SetPinValue+0xb0>
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	8c 93       	st	X, r24
 404:	a8 c0       	rjmp	.+336    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLEAR_BIT(PORTC, Copy_u8Pin); break;
 406:	a5 e3       	ldi	r26, 0x35	; 53
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e5 e3       	ldi	r30, 0x35	; 53
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	48 2f       	mov	r20, r24
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 2e       	mov	r0, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_u8SetPinValue+0xde>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_u8SetPinValue+0xda>
 428:	80 95       	com	r24
 42a:	84 23       	and	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	93 c0       	rjmp	.+294    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLEAR_BIT(PORTD, Copy_u8Pin); break;
 430:	a2 e3       	ldi	r26, 0x32	; 50
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e2 e3       	ldi	r30, 0x32	; 50
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8SetPinValue+0x108>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_u8SetPinValue+0x104>
 452:	80 95       	com	r24
 454:	84 23       	and	r24, r20
 456:	8c 93       	st	X, r24
 458:	7e c0       	rjmp	.+252    	; 0x556 <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = 1;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	7b c0       	rjmp	.+246    	; 0x556 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value  == DIO_u8PIN_HIGH)
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <DIO_u8SetPinValue+0x122>
 466:	72 c0       	rjmp	.+228    	; 0x54c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	3e 83       	std	Y+6, r19	; 0x06
 470:	2d 83       	std	Y+5, r18	; 0x05
 472:	8d 81       	ldd	r24, Y+5	; 0x05
 474:	9e 81       	ldd	r25, Y+6	; 0x06
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 05       	cpc	r25, r1
 47a:	49 f1       	breq	.+82     	; 0x4ce <DIO_u8SetPinValue+0x188>
 47c:	2d 81       	ldd	r18, Y+5	; 0x05
 47e:	3e 81       	ldd	r19, Y+6	; 0x06
 480:	22 30       	cpi	r18, 0x02	; 2
 482:	31 05       	cpc	r19, r1
 484:	2c f4       	brge	.+10     	; 0x490 <DIO_u8SetPinValue+0x14a>
 486:	8d 81       	ldd	r24, Y+5	; 0x05
 488:	9e 81       	ldd	r25, Y+6	; 0x06
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	61 f0       	breq	.+24     	; 0x4a6 <DIO_u8SetPinValue+0x160>
 48e:	5b c0       	rjmp	.+182    	; 0x546 <DIO_u8SetPinValue+0x200>
 490:	2d 81       	ldd	r18, Y+5	; 0x05
 492:	3e 81       	ldd	r19, Y+6	; 0x06
 494:	22 30       	cpi	r18, 0x02	; 2
 496:	31 05       	cpc	r19, r1
 498:	71 f1       	breq	.+92     	; 0x4f6 <DIO_u8SetPinValue+0x1b0>
 49a:	8d 81       	ldd	r24, Y+5	; 0x05
 49c:	9e 81       	ldd	r25, Y+6	; 0x06
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	91 05       	cpc	r25, r1
 4a2:	e9 f1       	breq	.+122    	; 0x51e <DIO_u8SetPinValue+0x1d8>
 4a4:	50 c0       	rjmp	.+160    	; 0x546 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
 4a6:	ab e3       	ldi	r26, 0x3B	; 59
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	eb e3       	ldi	r30, 0x3B	; 59
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_u8SetPinValue+0x17e>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_u8SetPinValue+0x17a>
 4c8:	84 2b       	or	r24, r20
 4ca:	8c 93       	st	X, r24
 4cc:	44 c0       	rjmp	.+136    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
 4ce:	a8 e3       	ldi	r26, 0x38	; 56
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	e8 e3       	ldi	r30, 0x38	; 56
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_u8SetPinValue+0x1a6>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_u8SetPinValue+0x1a2>
 4f0:	84 2b       	or	r24, r20
 4f2:	8c 93       	st	X, r24
 4f4:	30 c0       	rjmp	.+96     	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
 4f6:	a5 e3       	ldi	r26, 0x35	; 53
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e5 e3       	ldi	r30, 0x35	; 53
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 2e       	mov	r0, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8SetPinValue+0x1ce>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8SetPinValue+0x1ca>
 518:	84 2b       	or	r24, r20
 51a:	8c 93       	st	X, r24
 51c:	1c c0       	rjmp	.+56     	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
 51e:	a2 e3       	ldi	r26, 0x32	; 50
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e2 e3       	ldi	r30, 0x32	; 50
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8SetPinValue+0x1f6>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_u8SetPinValue+0x1f2>
 540:	84 2b       	or	r24, r20
 542:	8c 93       	st	X, r24
 544:	08 c0       	rjmp	.+16     	; 0x556 <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	89 83       	std	Y+1, r24	; 0x01
 54a:	05 c0       	rjmp	.+10     	; 0x556 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 556:	89 81       	ldd	r24, Y+1	; 0x01
}
 558:	28 96       	adiw	r28, 0x08	; 8
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	cf 91       	pop	r28
 566:	df 91       	pop	r29
 568:	08 95       	ret

0000056a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 56a:	df 93       	push	r29
 56c:	cf 93       	push	r28
 56e:	00 d0       	rcall	.+0      	; 0x570 <DIO_u8SetPortValue+0x6>
 570:	00 d0       	rcall	.+0      	; 0x572 <DIO_u8SetPortValue+0x8>
 572:	0f 92       	push	r0
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	8a 83       	std	Y+2, r24	; 0x02
 57a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
 57c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 57e:	8a 81       	ldd	r24, Y+2	; 0x02
 580:	28 2f       	mov	r18, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	3d 83       	std	Y+5, r19	; 0x05
 586:	2c 83       	std	Y+4, r18	; 0x04
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	9d 81       	ldd	r25, Y+5	; 0x05
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	91 05       	cpc	r25, r1
 590:	d1 f0       	breq	.+52     	; 0x5c6 <DIO_u8SetPortValue+0x5c>
 592:	2c 81       	ldd	r18, Y+4	; 0x04
 594:	3d 81       	ldd	r19, Y+5	; 0x05
 596:	22 30       	cpi	r18, 0x02	; 2
 598:	31 05       	cpc	r19, r1
 59a:	2c f4       	brge	.+10     	; 0x5a6 <DIO_u8SetPortValue+0x3c>
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	9d 81       	ldd	r25, Y+5	; 0x05
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	61 f0       	breq	.+24     	; 0x5bc <DIO_u8SetPortValue+0x52>
 5a4:	1f c0       	rjmp	.+62     	; 0x5e4 <DIO_u8SetPortValue+0x7a>
 5a6:	2c 81       	ldd	r18, Y+4	; 0x04
 5a8:	3d 81       	ldd	r19, Y+5	; 0x05
 5aa:	22 30       	cpi	r18, 0x02	; 2
 5ac:	31 05       	cpc	r19, r1
 5ae:	81 f0       	breq	.+32     	; 0x5d0 <DIO_u8SetPortValue+0x66>
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	9d 81       	ldd	r25, Y+5	; 0x05
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	91 05       	cpc	r25, r1
 5b8:	81 f0       	breq	.+32     	; 0x5da <DIO_u8SetPortValue+0x70>
 5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 5bc:	eb e3       	ldi	r30, 0x3B	; 59
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	80 83       	st	Z, r24
 5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 5c6:	e8 e3       	ldi	r30, 0x38	; 56
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	80 83       	st	Z, r24
 5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 5d0:	e5 e3       	ldi	r30, 0x35	; 53
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	80 83       	st	Z, r24
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 5da:	e2 e3       	ldi	r30, 0x32	; 50
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	80 83       	st	Z, r24
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = 1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	cf 91       	pop	r28
 5f6:	df 91       	pop	r29
 5f8:	08 95       	ret

000005fa <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
 5fa:	df 93       	push	r29
 5fc:	cf 93       	push	r28
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	27 97       	sbiw	r28, 0x07	; 7
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	8a 83       	std	Y+2, r24	; 0x02
 610:	6b 83       	std	Y+3, r22	; 0x03
 612:	5d 83       	std	Y+5, r21	; 0x05
 614:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
 616:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != (NULL) && Copy_u8Pin<= DIO_u8PIN7)
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	09 f4       	brne	.+2      	; 0x622 <DIO_u8GetPinValue+0x28>
 620:	78 c0       	rjmp	.+240    	; 0x712 <DIO_u8GetPinValue+0x118>
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	88 30       	cpi	r24, 0x08	; 8
 626:	08 f0       	brcs	.+2      	; 0x62a <DIO_u8GetPinValue+0x30>
 628:	74 c0       	rjmp	.+232    	; 0x712 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	3f 83       	std	Y+7, r19	; 0x07
 632:	2e 83       	std	Y+6, r18	; 0x06
 634:	4e 81       	ldd	r20, Y+6	; 0x06
 636:	5f 81       	ldd	r21, Y+7	; 0x07
 638:	41 30       	cpi	r20, 0x01	; 1
 63a:	51 05       	cpc	r21, r1
 63c:	59 f1       	breq	.+86     	; 0x694 <DIO_u8GetPinValue+0x9a>
 63e:	8e 81       	ldd	r24, Y+6	; 0x06
 640:	9f 81       	ldd	r25, Y+7	; 0x07
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	91 05       	cpc	r25, r1
 646:	34 f4       	brge	.+12     	; 0x654 <DIO_u8GetPinValue+0x5a>
 648:	2e 81       	ldd	r18, Y+6	; 0x06
 64a:	3f 81       	ldd	r19, Y+7	; 0x07
 64c:	21 15       	cp	r18, r1
 64e:	31 05       	cpc	r19, r1
 650:	69 f0       	breq	.+26     	; 0x66c <DIO_u8GetPinValue+0x72>
 652:	5c c0       	rjmp	.+184    	; 0x70c <DIO_u8GetPinValue+0x112>
 654:	4e 81       	ldd	r20, Y+6	; 0x06
 656:	5f 81       	ldd	r21, Y+7	; 0x07
 658:	42 30       	cpi	r20, 0x02	; 2
 65a:	51 05       	cpc	r21, r1
 65c:	79 f1       	breq	.+94     	; 0x6bc <DIO_u8GetPinValue+0xc2>
 65e:	8e 81       	ldd	r24, Y+6	; 0x06
 660:	9f 81       	ldd	r25, Y+7	; 0x07
 662:	83 30       	cpi	r24, 0x03	; 3
 664:	91 05       	cpc	r25, r1
 666:	09 f4       	brne	.+2      	; 0x66a <DIO_u8GetPinValue+0x70>
 668:	3d c0       	rjmp	.+122    	; 0x6e4 <DIO_u8GetPinValue+0xea>
 66a:	50 c0       	rjmp	.+160    	; 0x70c <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin);  break;
 66c:	e9 e3       	ldi	r30, 0x39	; 57
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	88 2f       	mov	r24, r24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	a9 01       	movw	r20, r18
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_u8GetPinValue+0x8a>
 680:	55 95       	asr	r21
 682:	47 95       	ror	r20
 684:	8a 95       	dec	r24
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_u8GetPinValue+0x86>
 688:	ca 01       	movw	r24, r20
 68a:	81 70       	andi	r24, 0x01	; 1
 68c:	ec 81       	ldd	r30, Y+4	; 0x04
 68e:	fd 81       	ldd	r31, Y+5	; 0x05
 690:	80 83       	st	Z, r24
 692:	41 c0       	rjmp	.+130    	; 0x716 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
 694:	e6 e3       	ldi	r30, 0x36	; 54
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	88 2f       	mov	r24, r24
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	a9 01       	movw	r20, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_u8GetPinValue+0xb2>
 6a8:	55 95       	asr	r21
 6aa:	47 95       	ror	r20
 6ac:	8a 95       	dec	r24
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_u8GetPinValue+0xae>
 6b0:	ca 01       	movw	r24, r20
 6b2:	81 70       	andi	r24, 0x01	; 1
 6b4:	ec 81       	ldd	r30, Y+4	; 0x04
 6b6:	fd 81       	ldd	r31, Y+5	; 0x05
 6b8:	80 83       	st	Z, r24
 6ba:	2d c0       	rjmp	.+90     	; 0x716 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
 6bc:	e3 e3       	ldi	r30, 0x33	; 51
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	28 2f       	mov	r18, r24
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	88 2f       	mov	r24, r24
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	a9 01       	movw	r20, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_u8GetPinValue+0xda>
 6d0:	55 95       	asr	r21
 6d2:	47 95       	ror	r20
 6d4:	8a 95       	dec	r24
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_u8GetPinValue+0xd6>
 6d8:	ca 01       	movw	r24, r20
 6da:	81 70       	andi	r24, 0x01	; 1
 6dc:	ec 81       	ldd	r30, Y+4	; 0x04
 6de:	fd 81       	ldd	r31, Y+5	; 0x05
 6e0:	80 83       	st	Z, r24
 6e2:	19 c0       	rjmp	.+50     	; 0x716 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
 6e4:	e0 e3       	ldi	r30, 0x30	; 48
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	28 2f       	mov	r18, r24
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	88 2f       	mov	r24, r24
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	a9 01       	movw	r20, r18
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_u8GetPinValue+0x102>
 6f8:	55 95       	asr	r21
 6fa:	47 95       	ror	r20
 6fc:	8a 95       	dec	r24
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_u8GetPinValue+0xfe>
 700:	ca 01       	movw	r24, r20
 702:	81 70       	andi	r24, 0x01	; 1
 704:	ec 81       	ldd	r30, Y+4	; 0x04
 706:	fd 81       	ldd	r31, Y+5	; 0x05
 708:	80 83       	st	Z, r24
 70a:	05 c0       	rjmp	.+10     	; 0x716 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState = 1;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	89 83       	std	Y+1, r24	; 0x01
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 716:	89 81       	ldd	r24, Y+1	; 0x01
}
 718:	27 96       	adiw	r28, 0x07	; 7
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <LED_u8TurnOn>:

#include "DIO_interface.h"
#include "LED_interface.h"

void LED_u8TurnOn(LED_t * LED)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	00 d0       	rcall	.+0      	; 0x730 <LED_u8TurnOn+0x6>
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	9a 83       	std	Y+2, r25	; 0x02
 736:	89 83       	std	Y+1, r24	; 0x01
	if((LED ->CONNECT_TYPE == SOURCE))
 738:	e9 81       	ldd	r30, Y+1	; 0x01
 73a:	fa 81       	ldd	r31, Y+2	; 0x02
 73c:	82 81       	ldd	r24, Z+2	; 0x02
 73e:	88 23       	and	r24, r24
 740:	a9 f4       	brne	.+42     	; 0x76c <LED_u8TurnOn+0x42>
	{
		DIO_u8SetPinDirection((LED ->PORT), (LED ->PIN), DIO_u8PIN_OUTPUT);
 742:	e9 81       	ldd	r30, Y+1	; 0x01
 744:	fa 81       	ldd	r31, Y+2	; 0x02
 746:	80 81       	ld	r24, Z
 748:	e9 81       	ldd	r30, Y+1	; 0x01
 74a:	fa 81       	ldd	r31, Y+2	; 0x02
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	69 2f       	mov	r22, r25
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue((LED ->PORT), (LED ->PIN), DIO_u8PIN_HIGH);
 756:	e9 81       	ldd	r30, Y+1	; 0x01
 758:	fa 81       	ldd	r31, Y+2	; 0x02
 75a:	80 81       	ld	r24, Z
 75c:	e9 81       	ldd	r30, Y+1	; 0x01
 75e:	fa 81       	ldd	r31, Y+2	; 0x02
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	69 2f       	mov	r22, r25
 764:	41 e0       	ldi	r20, 0x01	; 1
 766:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
 76a:	14 c0       	rjmp	.+40     	; 0x794 <LED_u8TurnOn+0x6a>
	}
	else
	{
		DIO_u8SetPinDirection((LED ->PORT), (LED ->PIN), DIO_u8PIN_OUTPUT);
 76c:	e9 81       	ldd	r30, Y+1	; 0x01
 76e:	fa 81       	ldd	r31, Y+2	; 0x02
 770:	80 81       	ld	r24, Z
 772:	e9 81       	ldd	r30, Y+1	; 0x01
 774:	fa 81       	ldd	r31, Y+2	; 0x02
 776:	91 81       	ldd	r25, Z+1	; 0x01
 778:	69 2f       	mov	r22, r25
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue((LED ->PORT), (LED ->PIN), DIO_u8PIN_LOW);
 780:	e9 81       	ldd	r30, Y+1	; 0x01
 782:	fa 81       	ldd	r31, Y+2	; 0x02
 784:	80 81       	ld	r24, Z
 786:	e9 81       	ldd	r30, Y+1	; 0x01
 788:	fa 81       	ldd	r31, Y+2	; 0x02
 78a:	91 81       	ldd	r25, Z+1	; 0x01
 78c:	69 2f       	mov	r22, r25
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
	}
}
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <LED_u8TurnOff>:
void LED_u8TurnOff(LED_t * LED)
{
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <LED_u8TurnOff+0x6>
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	9a 83       	std	Y+2, r25	; 0x02
 7aa:	89 83       	std	Y+1, r24	; 0x01
	if((LED ->CONNECT_TYPE == SOURCE))
 7ac:	e9 81       	ldd	r30, Y+1	; 0x01
 7ae:	fa 81       	ldd	r31, Y+2	; 0x02
 7b0:	82 81       	ldd	r24, Z+2	; 0x02
 7b2:	88 23       	and	r24, r24
 7b4:	59 f4       	brne	.+22     	; 0x7cc <LED_u8TurnOff+0x2e>
	{

		DIO_u8SetPinValue((LED ->PORT), (LED ->PIN), DIO_u8PIN_LOW);
 7b6:	e9 81       	ldd	r30, Y+1	; 0x01
 7b8:	fa 81       	ldd	r31, Y+2	; 0x02
 7ba:	80 81       	ld	r24, Z
 7bc:	e9 81       	ldd	r30, Y+1	; 0x01
 7be:	fa 81       	ldd	r31, Y+2	; 0x02
 7c0:	91 81       	ldd	r25, Z+1	; 0x01
 7c2:	69 2f       	mov	r22, r25
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
 7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <LED_u8TurnOff+0x42>
	}
	else
	{
		DIO_u8SetPinValue((LED ->PORT), (LED ->PIN), DIO_u8PIN_HIGH);
 7cc:	e9 81       	ldd	r30, Y+1	; 0x01
 7ce:	fa 81       	ldd	r31, Y+2	; 0x02
 7d0:	80 81       	ld	r24, Z
 7d2:	e9 81       	ldd	r30, Y+1	; 0x01
 7d4:	fa 81       	ldd	r31, Y+2	; 0x02
 7d6:	91 81       	ldd	r25, Z+1	; 0x01
 7d8:	69 2f       	mov	r22, r25
 7da:	41 e0       	ldi	r20, 0x01	; 1
 7dc:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
	}
}
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	cf 91       	pop	r28
 7e6:	df 91       	pop	r29
 7e8:	08 95       	ret

000007ea <SW_u8GetState>:
#include "SW_interface.h"

static u8 Local_u8CheckNumber = 0;

u8 SW_u8GetState(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8PullType)
{
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <SW_u8GetState+0x6>
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <SW_u8GetState+0x8>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	8a 83       	std	Y+2, r24	; 0x02
 7f8:	6b 83       	std	Y+3, r22	; 0x03
 7fa:	4c 83       	std	Y+4, r20	; 0x04
	u8 SW_State = NOT_PRESSED;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PullType == PullUP)
 800:	8c 81       	ldd	r24, Y+4	; 0x04
 802:	88 23       	and	r24, r24
 804:	81 f4       	brne	.+32     	; 0x826 <SW_u8GetState+0x3c>
	{
		DIO_u8GetPinValue(Copy_u8Port,Copy_u8Pin, &Local_u8CheckNumber);
 806:	24 e6       	ldi	r18, 0x64	; 100
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	6b 81       	ldd	r22, Y+3	; 0x03
 80e:	a9 01       	movw	r20, r18
 810:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8GetPinValue>
		if( Local_u8CheckNumber == 1)
 814:	80 91 64 00 	lds	r24, 0x0064
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	19 f4       	brne	.+6      	; 0x822 <SW_u8GetState+0x38>
		{
			SW_State =  NOT_PRESSED;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	89 83       	std	Y+1, r24	; 0x01
 820:	14 c0       	rjmp	.+40     	; 0x84a <SW_u8GetState+0x60>
		}
		else
		{
			SW_State =  PRESSED;
 822:	19 82       	std	Y+1, r1	; 0x01
 824:	12 c0       	rjmp	.+36     	; 0x84a <SW_u8GetState+0x60>
		}
	}
	else if(Copy_u8PullType == PullDown)
 826:	8c 81       	ldd	r24, Y+4	; 0x04
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	79 f4       	brne	.+30     	; 0x84a <SW_u8GetState+0x60>
	{
		DIO_u8GetPinValue(Copy_u8Port,Copy_u8Pin, &Local_u8CheckNumber);
 82c:	24 e6       	ldi	r18, 0x64	; 100
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	6b 81       	ldd	r22, Y+3	; 0x03
 834:	a9 01       	movw	r20, r18
 836:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8GetPinValue>
		if(Local_u8CheckNumber == 0)
 83a:	80 91 64 00 	lds	r24, 0x0064
 83e:	88 23       	and	r24, r24
 840:	11 f4       	brne	.+4      	; 0x846 <SW_u8GetState+0x5c>
		{
			SW_State =  PRESSED;
 842:	19 82       	std	Y+1, r1	; 0x01
 844:	02 c0       	rjmp	.+4      	; 0x84a <SW_u8GetState+0x60>
		}
		else
		{
			SW_State =  NOT_PRESSED;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return SW_State;
 84a:	89 81       	ldd	r24, Y+1	; 0x01
}
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	cf 91       	pop	r28
 856:	df 91       	pop	r29
 858:	08 95       	ret

0000085a <main>:
#include "DIO_interface.h"
#include "SW_interface.h"
#include "LED_interface.h"

int main(void)
{
 85a:	df 93       	push	r29
 85c:	cf 93       	push	r28
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	28 97       	sbiw	r28, 0x08	; 8
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	f8 94       	cli
 868:	de bf       	out	0x3e, r29	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	cd bf       	out	0x3d, r28	; 61
	LED_t LED_1 = {DIO_u8PORTB, DIO_u8PIN7, SOURCE};
 86e:	ce 01       	movw	r24, r28
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	9d 83       	std	Y+5, r25	; 0x05
 874:	8c 83       	std	Y+4, r24	; 0x04
 876:	e0 e6       	ldi	r30, 0x60	; 96
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	ff 83       	std	Y+7, r31	; 0x07
 87c:	ee 83       	std	Y+6, r30	; 0x06
 87e:	f3 e0       	ldi	r31, 0x03	; 3
 880:	f8 87       	std	Y+8, r31	; 0x08
 882:	ee 81       	ldd	r30, Y+6	; 0x06
 884:	ff 81       	ldd	r31, Y+7	; 0x07
 886:	00 80       	ld	r0, Z
 888:	8e 81       	ldd	r24, Y+6	; 0x06
 88a:	9f 81       	ldd	r25, Y+7	; 0x07
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	9f 83       	std	Y+7, r25	; 0x07
 890:	8e 83       	std	Y+6, r24	; 0x06
 892:	ec 81       	ldd	r30, Y+4	; 0x04
 894:	fd 81       	ldd	r31, Y+5	; 0x05
 896:	00 82       	st	Z, r0
 898:	8c 81       	ldd	r24, Y+4	; 0x04
 89a:	9d 81       	ldd	r25, Y+5	; 0x05
 89c:	01 96       	adiw	r24, 0x01	; 1
 89e:	9d 83       	std	Y+5, r25	; 0x05
 8a0:	8c 83       	std	Y+4, r24	; 0x04
 8a2:	98 85       	ldd	r25, Y+8	; 0x08
 8a4:	91 50       	subi	r25, 0x01	; 1
 8a6:	98 87       	std	Y+8, r25	; 0x08
 8a8:	e8 85       	ldd	r30, Y+8	; 0x08
 8aa:	ee 23       	and	r30, r30
 8ac:	51 f7       	brne	.-44     	; 0x882 <__stack+0x23>

	/* Activate PULLUP */
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_INPUT);
 8ae:	83 e0       	ldi	r24, 0x03	; 3
 8b0:	67 e0       	ldi	r22, 0x07	; 7
 8b2:	40 e0       	ldi	r20, 0x00	; 0
 8b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_HIGH);
 8b8:	83 e0       	ldi	r24, 0x03	; 3
 8ba:	67 e0       	ldi	r22, 0x07	; 7
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>

	while(1)
	{

		if(SW_u8GetState(DIO_u8PORTD,  DIO_u8PIN7, PullUP) == PRESSED)
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	67 e0       	ldi	r22, 0x07	; 7
 8c6:	40 e0       	ldi	r20, 0x00	; 0
 8c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SW_u8GetState>
 8cc:	88 23       	and	r24, r24
 8ce:	29 f4       	brne	.+10     	; 0x8da <__stack+0x7b>
			{
				LED_u8TurnOn(&LED_1);
 8d0:	ce 01       	movw	r24, r28
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	0e 94 95 03 	call	0x72a	; 0x72a <LED_u8TurnOn>
 8d8:	f4 cf       	rjmp	.-24     	; 0x8c2 <__stack+0x63>
			}
			else
			{
				LED_u8TurnOff(&LED_1);
 8da:	ce 01       	movw	r24, r28
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_u8TurnOff>
 8e2:	ef cf       	rjmp	.-34     	; 0x8c2 <__stack+0x63>

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
