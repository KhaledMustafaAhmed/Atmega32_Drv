
TWIGIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000007bc  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000560  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  64:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_private.h"

/* Pass 0 in the slave address argument if master will not be addressed */
void TWI_voidMasterInit(u8 Copy_u8SlaveAddress)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	/* Set clock Freq to 400kbps */
	/* Set TWBR to 2 */
	TWBR = 2;
  78:	e0 e2       	ldi	r30, 0x20	; 32
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	80 83       	st	Z, r24
	/* Clear two Bits of TWPS */
	CLEAR_BIT(TWSR, TWSR_TWPS0);
  80:	a1 e2       	ldi	r26, 0x21	; 33
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e1 e2       	ldi	r30, 0x21	; 33
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWSR_TWPS1);
  8e:	a1 e2       	ldi	r26, 0x21	; 33
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e1 e2       	ldi	r30, 0x21	; 33
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	8d 7f       	andi	r24, 0xFD	; 253
  9a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
  9c:	a6 e5       	ldi	r26, 0x56	; 86
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	e6 e5       	ldi	r30, 0x56	; 86
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8c 93       	st	X, r24
	/* Intialize Node Address */
	if(Copy_u8SlaveAddress != 0)
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	88 23       	and	r24, r24
  ae:	29 f0       	breq	.+10     	; 0xba <TWI_voidMasterInit+0x4e>
	{
		TWAR = ( Copy_u8SlaveAddress << 1 );
  b0:	e2 e2       	ldi	r30, 0x22	; 34
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	88 0f       	add	r24, r24
  b8:	80 83       	st	Z, r24
	}
}
  ba:	0f 90       	pop	r0
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	0f 92       	push	r0
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	89 83       	std	Y+1, r24	; 0x01
	/* Intialize Node Address */
	TWAR = Copy_u8SlaveAddress<<1;
  ce:	e2 e2       	ldi	r30, 0x22	; 34
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	88 0f       	add	r24, r24
  d6:	80 83       	st	Z, r24

	/* Enable TWI */
	SET_BIT(TWCR, TWCR_TWEN);
  d8:	a6 e5       	ldi	r26, 0x56	; 86
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e5       	ldi	r30, 0x56	; 86
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	8c 93       	st	X, r24
}
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <TWI_SendStartCondition>:

TWI_ERROR_STATUS TWI_SendStartCondition(void)
{
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS Local_ErrorStatus = NoError;
  f8:	19 82       	std	Y+1, r1	; 0x01

	/* Send start Condition on the Bus */
	SET_BIT(TWCR, TWCR_TWSTA);
  fa:	a6 e5       	ldi	r26, 0x56	; 86
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e6 e5       	ldi	r30, 0x56	; 86
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	8c 93       	st	X, r24

	/* Clear the interrupt flag */
	SET_BIT(TWCR, TWCR_TWINT);
 108:	a6 e5       	ldi	r26, 0x56	; 86
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e6 e5       	ldi	r30, 0x56	; 86
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWCR_TWINT) == 0)
 116:	e6 e5       	ldi	r30, 0x56	; 86
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	dc f7       	brge	.-10     	; 0x116 <TWI_SendStartCondition+0x28>
	{;}


	if((TWSR & 0xF8) != START_ACK)
 120:	e1 e2       	ldi	r30, 0x21	; 33
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	91 05       	cpc	r25, r1
 132:	11 f0       	breq	.+4      	; 0x138 <TWI_SendStartCondition+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorStatus;
 138:	89 81       	ldd	r24, Y+1	; 0x01
}
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret

00000142 <TWI_SendRepeatedStart>:

TWI_ERROR_STATUS TWI_SendRepeatedStart(void)
{
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	0f 92       	push	r0
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS Local_ErrorStatus =NoError;
 14c:	19 82       	std	Y+1, r1	; 0x01

	/* Send start Condition on the Bus */
	SET_BIT(TWCR, TWCR_TWSTA);
 14e:	a6 e5       	ldi	r26, 0x56	; 86
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e6 e5       	ldi	r30, 0x56	; 86
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	8c 93       	st	X, r24

	/* Clear the interrupt flag */
	SET_BIT(TWCR, TWCR_TWINT);
 15c:	a6 e5       	ldi	r26, 0x56	; 86
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e6 e5       	ldi	r30, 0x56	; 86
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 16a:	e6 e5       	ldi	r30, 0x56	; 86
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	dc f7       	brge	.-10     	; 0x16a <TWI_SendRepeatedStart+0x28>

	if((TWSR & 0xF8) != REP_START_ACK)
 174:	e1 e2       	ldi	r30, 0x21	; 33
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	88 7f       	andi	r24, 0xF8	; 248
 180:	90 70       	andi	r25, 0x00	; 0
 182:	80 31       	cpi	r24, 0x10	; 16
 184:	91 05       	cpc	r25, r1
 186:	11 f0       	breq	.+4      	; 0x18c <TWI_SendRepeatedStart+0x4a>
		Local_ErrorStatus = RepeatedStartError;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorStatus;
 18c:	89 81       	ldd	r24, Y+1	; 0x01
}
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <TWI_SendSlaveAddressWithWrite>:

TWI_ERROR_STATUS TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	00 d0       	rcall	.+0      	; 0x19c <TWI_SendSlaveAddressWithWrite+0x6>
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS Local_ErrorStatus = NoError;
 1a2:	19 82       	std	Y+1, r1	; 0x01

	/* Clear Start Condition Bit */
	CLEAR_BIT(TWCR, TWCR_TWSTA);
 1a4:	a6 e5       	ldi	r26, 0x56	; 86
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e6 e5       	ldi	r30, 0x56	; 86
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	8c 93       	st	X, r24

	/* Set the slave address in the 7 MSB in the data register */
	TWDR = (Copy_u8SlaveAddress<<1);
 1b2:	e3 e2       	ldi	r30, 0x23	; 35
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	88 0f       	add	r24, r24
 1ba:	80 83       	st	Z, r24
	CLEAR_BIT(TWDR, 0); /* For Write request */
 1bc:	a3 e2       	ldi	r26, 0x23	; 35
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e3 e2       	ldi	r30, 0x23	; 35
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	8c 93       	st	X, r24

	/* Clear the interrupt flag */
	SET_BIT(TWCR, TWCR_TWINT);
 1ca:	a6 e5       	ldi	r26, 0x56	; 86
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e6 e5       	ldi	r30, 0x56	; 86
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 1d8:	e6 e5       	ldi	r30, 0x56	; 86
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	88 23       	and	r24, r24
 1e0:	dc f7       	brge	.-10     	; 0x1d8 <TWI_SendSlaveAddressWithWrite+0x42>

	if((TWSR & 0xF8) != SLAVE_ADD_AND_W_ACK)
 1e2:	e1 e2       	ldi	r30, 0x21	; 33
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	88 7f       	andi	r24, 0xF8	; 248
 1ee:	90 70       	andi	r25, 0x00	; 0
 1f0:	88 31       	cpi	r24, 0x18	; 24
 1f2:	91 05       	cpc	r25, r1
 1f4:	11 f0       	breq	.+4      	; 0x1fa <TWI_SendSlaveAddressWithWrite+0x64>
		Local_ErrorStatus = SlaveAddressWithWriteError;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <TWI_SendSlaveAddressWithRead>:

TWI_ERROR_STATUS TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	00 d0       	rcall	.+0      	; 0x20c <TWI_SendSlaveAddressWithRead+0x6>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS Local_ErrorStatus = NoError;
 212:	19 82       	std	Y+1, r1	; 0x01

	/* Clear Start Condition Bit */
	CLEAR_BIT(TWCR, TWCR_TWSTA);
 214:	a6 e5       	ldi	r26, 0x56	; 86
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e6 e5       	ldi	r30, 0x56	; 86
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 7d       	andi	r24, 0xDF	; 223
 220:	8c 93       	st	X, r24

	/* Set the slave address in the 7 MSB in the data register */
	TWDR = (Copy_u8SlaveAddress<<1);
 222:	e3 e2       	ldi	r30, 0x23	; 35
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	88 0f       	add	r24, r24
 22a:	80 83       	st	Z, r24
	SET_BIT(TWDR, 0); /* For Read request */
 22c:	a3 e2       	ldi	r26, 0x23	; 35
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e3 e2       	ldi	r30, 0x23	; 35
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	81 60       	ori	r24, 0x01	; 1
 238:	8c 93       	st	X, r24

	/* Clear the interrupt flag */
	SET_BIT(TWCR, TWCR_TWINT);
 23a:	a6 e5       	ldi	r26, 0x56	; 86
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e6 e5       	ldi	r30, 0x56	; 86
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 68       	ori	r24, 0x80	; 128
 246:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 248:	e6 e5       	ldi	r30, 0x56	; 86
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	dc f7       	brge	.-10     	; 0x248 <TWI_SendSlaveAddressWithRead+0x42>

	if((TWSR & 0xF8) != SLAVE_ADD_AND_R_ACK)
 252:	e1 e2       	ldi	r30, 0x21	; 33
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	90 70       	andi	r25, 0x00	; 0
 260:	80 34       	cpi	r24, 0x40	; 64
 262:	91 05       	cpc	r25, r1
 264:	11 f0       	breq	.+4      	; 0x26a <TWI_SendSlaveAddressWithRead+0x64>
		Local_ErrorStatus = SlaveAddressWithReadError;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorStatus;
 26a:	89 81       	ldd	r24, Y+1	; 0x01
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	08 95       	ret

00000276 <TWI_MasterWriteDataByte>:

TWI_ERROR_STATUS TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	00 d0       	rcall	.+0      	; 0x27c <TWI_MasterWriteDataByte+0x6>
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS Local_ErrorStatus = NoError;
 282:	19 82       	std	Y+1, r1	; 0x01

	/* Write data into data register */
	TWDR = Copy_u8DataByte;
 284:	e3 e2       	ldi	r30, 0x23	; 35
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	80 83       	st	Z, r24
	/* Clear interrupt flag   */
	SET_BIT(TWCR, TWCR_TWINT);
 28c:	a6 e5       	ldi	r26, 0x56	; 86
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	e6 e5       	ldi	r30, 0x56	; 86
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	80 68       	ori	r24, 0x80	; 128
 298:	8c 93       	st	X, r24

	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
 29a:	e6 e5       	ldi	r30, 0x56	; 86
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	dc f7       	brge	.-10     	; 0x29a <TWI_MasterWriteDataByte+0x24>

	if((TWSR & 0xF8) != MSTR_W_BYTE_ACK)
 2a4:	e1 e2       	ldi	r30, 0x21	; 33
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 2f       	mov	r24, r24
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	88 7f       	andi	r24, 0xF8	; 248
 2b0:	90 70       	andi	r25, 0x00	; 0
 2b2:	88 32       	cpi	r24, 0x28	; 40
 2b4:	91 05       	cpc	r25, r1
 2b6:	11 f0       	breq	.+4      	; 0x2bc <TWI_MasterWriteDataByte+0x46>
		Local_ErrorStatus = MasterWriteByteError;
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorStatus;
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	cf 91       	pop	r28
 2c4:	df 91       	pop	r29
 2c6:	08 95       	ret

000002c8 <TWI_MasterReadDataByte>:

TWI_ERROR_STATUS TWI_MasterReadDataByte(u8 *Copy_pu8DataByte)
{
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <TWI_MasterReadDataByte+0x6>
 2ce:	0f 92       	push	r0
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	9b 83       	std	Y+3, r25	; 0x03
 2d6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS Local_ErrorStatus = NoError;
 2d8:	19 82       	std	Y+1, r1	; 0x01

	/* Enable master generate ACK bit */
	SET_BIT(TWCR,TWCR_TWEA);
 2da:	a6 e5       	ldi	r26, 0x56	; 86
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e6 e5       	ldi	r30, 0x56	; 86
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	8c 93       	st	X, r24

	/* Clear interrupt flag   */
	SET_BIT(TWCR, TWCR_TWIE);
 2e8:	a6 e5       	ldi	r26, 0x56	; 86
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e6 e5       	ldi	r30, 0x56	; 86
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	8c 93       	st	X, r24

	while(GET_BIT(TWCR, TWCR_TWIE) == 0);
 2f6:	e6 e5       	ldi	r30, 0x56	; 86
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	81 70       	andi	r24, 0x01	; 1
 302:	90 70       	andi	r25, 0x00	; 0
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	b9 f3       	breq	.-18     	; 0x2f6 <TWI_MasterReadDataByte+0x2e>

	if((TWSR & 0xF8) != MSTR_R_BYTE_WITH_ACK)
 308:	e1 e2       	ldi	r30, 0x21	; 33
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	88 7f       	andi	r24, 0xF8	; 248
 314:	90 70       	andi	r25, 0x00	; 0
 316:	80 35       	cpi	r24, 0x50	; 80
 318:	91 05       	cpc	r25, r1
 31a:	19 f0       	breq	.+6      	; 0x322 <TWI_MasterReadDataByte+0x5a>
		Local_ErrorStatus = MasterReadByteError;
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	06 c0       	rjmp	.+12     	; 0x32e <TWI_MasterReadDataByte+0x66>
	else
		*Copy_pu8DataByte = TWDR ;
 322:	e3 e2       	ldi	r30, 0x23	; 35
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	ea 81       	ldd	r30, Y+2	; 0x02
 32a:	fb 81       	ldd	r31, Y+3	; 0x03
 32c:	80 83       	st	Z, r24

	return Local_ErrorStatus;
 32e:	89 81       	ldd	r24, Y+1	; 0x01
}
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
 33c:	df 93       	push	r29
 33e:	cf 93       	push	r28
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	/* Send start Condition on the Bus */
	SET_BIT(TWCR, TWCR_TWSTO);
 344:	a6 e5       	ldi	r26, 0x56	; 86
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e6 e5       	ldi	r30, 0x56	; 86
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	8c 93       	st	X, r24

	/* Clear the interrupt flag */
	SET_BIT(TWCR, TWCR_TWINT);
 352:	a6 e5       	ldi	r26, 0x56	; 86
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	e6 e5       	ldi	r30, 0x56	; 86
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	8c 93       	st	X, r24
}
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	08 95       	ret

00000366 <main>:
 *
 *  Created on: Mar 1, 2024
 *      Author: yasse
 */

 int main(int argc, char **argv) {
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	00 d0       	rcall	.+0      	; 0x36c <main+0x6>
 36c:	00 d0       	rcall	.+0      	; 0x36e <main+0x8>
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	9a 83       	std	Y+2, r25	; 0x02
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	7c 83       	std	Y+4, r23	; 0x04
 378:	6b 83       	std	Y+3, r22	; 0x03
	return 0;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
}
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	cf 91       	pop	r28
 388:	df 91       	pop	r29
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
